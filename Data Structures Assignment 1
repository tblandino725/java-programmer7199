//for A001
public class Date 
{
  protected int year;
  protected int month;
  protected int day;
  public static final int MINYEAR = 1583;

  // Constructor
  public Date(int newMonth, int newDay, int newYear) {
    month = newMonth;  
    day = newDay;  
    year = newYear;
   }

  // Observers
  public int getYear() { 
	  return year;  
	  }
  
  public int getMonth() { 
	  return month;
	  }
  
  public int getDay() { 
	  return day;   
	  }

  
  public int lilian()
  {
    // Returns the Lilian Day Number of this date.
    // Precondition: This Date is a valid date after 10/14/1582.
    //
    // Computes the number of days between 1/1/0 and this date as if no calendar
    // reforms took place, then subtracts 578,100 so that October 15, 1582 is day 1. 
    
    final int subDays = 578100;  // number of calculated days from 1/1/0 to 10/14/1582

    int numDays = 0;

    // Add days in years.
    numDays = year * 365;

    // Add days in the months.
    if (month <= 2) 
      numDays = numDays + (month - 1) * 31;
    else 
      numDays = numDays + ((month - 1) * 31) - ((4 * (month-1) + 27) / 10);

    // Add days in the days.
    numDays = numDays + day;

    // Take care of leap years.
    numDays = numDays + (year / 4) - (year / 100) + (year / 400);

    // Handle special case of leap year but not yet leap day.
    if (month < 3) 
    {
        if ((year % 4) == 0)   numDays = numDays - 1;
        if ((year % 100) == 0) numDays = numDays + 1;
        if ((year % 400) == 0) numDays = numDays - 1;
    }

    // Subtract extra days up to 10/14/1582.
    numDays = numDays - subDays;
    return numDays;
  }
  
  @Override
  public String toString()
  // Returns this date as a String.
  {
    return(month + "/" + day + "/" + year);
  }

  public int compareTo(Date anotherDate) {
	
	  if (getYear() > anotherDate.getYear()) {
		  return 1;
	  } else if (getYear() < anotherDate.getYear()) {
		  return -1;
	  } else if (getYear() == anotherDate.getYear()){
		  if (getMonth() > anotherDate.getMonth()) {
			  return 1;
		  } else if (getMonth() < anotherDate.getMonth()) {
			  return -1;
		  } else if (getMonth() == anotherDate.getMonth()) {
			  if (getDay() > anotherDate.getDay()) {
			  return 1;
			  } else if (getDay() < anotherDate.getDay()) {
			  return -1;
			  } else if (getDay() == anotherDate.getDay()) {	
			  return 0;
			  }
		  }
	  }
	return day;
  }
}


//for A001
public class DateDriver {

	public static void main(String[] args) {
		Date d1 = new Date(2, 11, 1969);
		System.out.println(d1);
		Date d2 = new Date(2, 11, 1969);
		System.out.println(d2);
		System.out.println(d1.compareTo(d2));
	}
}





 
